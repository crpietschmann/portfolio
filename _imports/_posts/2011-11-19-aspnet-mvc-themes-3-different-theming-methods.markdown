---
layout: post
title: "ASP.NET MVC Themes: 3 different theming methods"
date: 2011-11-19 11:11:04 -0600
comments: true
published: true
categories: ["blog", "archives"]
tags: ["ASP.NET MVC"]
redirect_from: 
  - /post/2011/11/19/ASPNET-MVC-Themes-3-different-theming-methods
  - /post/2011/11/19/aspnet-mvc-themes-3-different-theming-methods
---
<!-- more -->
<p>There really isn’t a single “one size fits all” solution to theming an ASP.NET MVC web application. From my experience working with the platform, there are really 3 different methods that can be used to theme your apps.</p>  <p>Here they are in no particular order:</p>  <h3>1. CSS Stylesheet</h3>  <p>This is the simplest and pretty much standard method that’s used to theme an ASP.NET MVC web application. Basically, you just create a different version of your sites CSS file for each “theme.” Then you include the appropriate CSS for which ever theme you want enabled.</p>  <p>Even though this method is the simplest, it doesn’t allow you to customize any of the HTML to be theme specific.</p>  <p>The <a href="http://mvccontribgallery.codeplex.com/">MvcContrib Template Gallery</a> over on CodePlex contains some themes you can download that work this way.</p>  <h3>2. Custom Theming ViewEngine</h3>  <p>A while back, I posted some sample code on my blog on how to “<a href="/post/2009/03/ASPNET-MVC-Implement-Theme-Folders-using-a-Custom-ViewEngine.aspx">Implement Theme Folders using a Custom ViewEngine</a>.” I originally posted about this for <a href="/post/2008/08/17/How-To-Setup-Custom-Theme-Support-In-ASPNET-MVC-using-a-Custom-ViewEngine.aspx">ASP.NET MVC Preview 4</a>, and then updated it to support ASP.NET MVC 1.0.</p>  <p>Basically, what this code does is add a couple additional “Views” folders to the WebFormViewEngine that allows you to create different .aspx and .ascx pages for your themes, in addition to changing the CSS Stylesheet. This method allows you to completely customize both the HTML and CSS for each of your web applications themes.</p>  <h3>2. Areas</h3>  <p>The previous 2 methods are only HTML and CSS options. This option allows you to customize everything from the Controller Actions to the Views for your Themes.</p>  <p>Basically, you create a new <a href="http://msdn.microsoft.com/en-us/library/ee671793.aspx">Area in your ASP.NET MVC</a> application for each Theme.</p>  <p>For example: If you want to have a different theme for Desktop and Mobile users; you just create an Area for each containing the complete code necessary for each experience. You can also share any Data Access Layer or Model code between any Controller / Area you want, or keep them completely separate.</p>  <p>This may be the most flexible when it comes to theming the application, but it does add a little more code depending on your theming needs.</p>  <h3>Conclusion</h3>  <p>The theming solution you choose to use will depend on your theming needs. Also, any one solution may not fit your exact needs, so you could mix them too. An example of mixing would be to use both the CSS and Area methods, to both theme and separate your code for different pieces of the application.</p>  <p>I originally saw the CSS solution to not fit, and that’s why I originally developed the Custom ViewEngine method (back in 2008 already!) Even though it can work perfectly well, I am thinking that mixing Areas and CSS might be a more elegant solution.</p>  <p>One thing to think about when building a web app is, when it comes to the client-side browser, HTML and JSON become the Model and CSS can be used as your View. If you get in that frame of mind you could likely use the straight CSS approach very successfully.</p>  <p>Happy Theming!!</p>
